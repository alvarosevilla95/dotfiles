" Install vim-plug automatically
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'daviesjamie/vim-base16-lightline'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'easymotion/vim-easymotion'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'
Plug 'rust-lang/rust.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'morhetz/gruvbox'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'fatih/vim-go'
Plug 'liuchengxu/vista.vim'
Plug 'tpope/vim-vinegar'
Plug 'xolox/vim-misc'
Plug 'tpope/vim-commentary'
Plug 'vimwiki/vimwiki'
Plug 'janko/vim-test'
Plug 'benmills/vimux'
Plug 'francoiscabrol/ranger.vim'
Plug 'airblade/vim-gitgutter'
Plug 'jreybert/vimagit'
Plug 'tpope/vim-rhubarb'
Plug 'svermeulen/vim-subversive'
Plug 'svermeulen/vim-yoink'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
" Plug 'tpope/vim-sensible'
" Plug 'tpope/vim-eunuch'
call plug#end()

let test#java#runner = 'gradletest'
let test#strategy = "vimux"
let g:ranger_map_keys = 0
let g:netrw_liststyle = 3

colorscheme gruvbox
let g:gruvbox_termcolors = 256
highlight SignColumn guibg=bg
highlight SignColumn ctermbg=bg
highlight GitGutterAdd    guifg=#009900 guibg=bg ctermfg=2 ctermbg=bg
highlight GitGutterChange guifg=#bbbb00 guibg=bg ctermfg=3 ctermbg=bg
highlight GitGutterDelete guifg=#ff2222 guibg=bg ctermfg=1 ctermbg=bg

" Basic defaults
syntax on
set background=dark
set t_Co=256
set updatetime=100
set splitright
set cursorline
set relativenumber
set hidden
set wildmenu
set showcmd
set hlsearch
set ignorecase
set smartcase
set backspace=indent,eol,start
set autoindent
set nostartofline
set ruler
set laststatus=2
set confirm
set visualbell
set t_vb=
set t_ut=
" set ttymouse=xterm2
set mouse=a
set number
set notimeout ttimeout ttimeoutlen=0
set pastetoggle=<F11>
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set clipboard=unnamed
set noshowmode
set autowrite

" FZF
let g:fzf_history_dir = '~/.local/share/fzf-history'
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%', '?'),
  \   <bang>0)

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

function! s:buflist()
    redir => ls
    silent ls
    redir END
    return split(ls, '\n')
endfunction

function! s:bufopen(e)
    execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

function! s:open_branch_fzf(line)
  let l:parser = split(a:line)
  let l:branch = l:parser[0]
  if l:branch ==? '*'
    let l:branch = l:parser[1]
  endif
  execute '!git checkout ' . l:branch
endfunction

command! -bang -nargs=0 GCheckout
  \ call fzf#vim#grep(
  \   'git branch -v', 0,
  \   {
  \     'sink': function('s:open_branch_fzf')
  \   },
  \   <bang>0
  \ )

command! -bang -nargs=0 GLog
  \ call fzf#vim#grep(
  \   'git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@"', 0,
  \   {
  \     'sink': function('s:git_show_fzf')
  \   },
  \   <bang>0
  \ )

function! s:git_show_fzf(line)
  execute "grep -o '[a-f0-9]\{7\}' | git show --color=always " . a:line
endfunction

function! GetRegisters()
  redir => cout
  silent registers
  redir END
  return split(cout, "\n")[1:11]
endfunction

function! UseRegister(line)
  " let var_a = getreg(a:line[1], 1, 1)
  " let var_amode = getregtype(a:line[1])
  " call setreg('"', var_a, varamode)
  execute ':put ' a:line[1]
endfunction

command! Registers call fzf#run(fzf#wrap({
        \ 'source': GetRegisters(),
        \ 'sink': function('UseRegister')}))


" COC
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<Tab>" :
            \ coc#refresh()

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : 
            \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <TAB>
            \ pumvisible() ? coc#_select_confirm() :
            \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Snippets
let g:coc_snippet_next = '<tab>'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:fzf_prefer_tmux = 1
let g:java_highlight_all = 1 
let g:gitgutter_override_sign_column_highlight = 1

" Vista
" autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
let g:vista_default_executive = 'coc'
let g:vista#renderer#enable_icon = 0
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }

" vim-go
let g:go_fmt_command = "goimports"

" Lightline config
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction
function! NearestMethodOrFunction() abort
      return get(b:, 'vista_nearest_method_or_function', '')
endfunction
set statusline+=%{NearestMethodOrFunction()}
let g:lightline = {
            \ 'colorscheme': 'gruvbox',
            \ 'active': {
            \   'left':  [[ 'mode', 'paste' ], ['fugitive'], ['filename'], ['method']],
            \   'right': [['lineinfo'], ['percent'], ['filetype'], ['cocstatus']]
            \ },
            \ 'component_function': {
            \   'fugitive': 'LightlineFugitive',
            \   'modified': 'LightlineModified',
            \   'cocstatus': 'coc#status',
            \   'currentfunction': 'CocCurrentFunction',
            \   'method': 'NearestMethodOrFunction'
            \ }
            \ }
function! LightlineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction
function! LightlineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

" Key bindings
onoremap ie :exec "normal! ggVG"<cr>
nnoremap ; :
nnoremap : ;
nnoremap <C-L> :nohl<CR>
nnoremap [{ :GitGutterPrevHunk<CR>
nnoremap ]} :GitGutterNextHunk<CR>
map Y y$
cmap w!! w !sudo tee > /dev/null %
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)
nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
nmap s <plug>(SubversiveSubstitute)
nmap ss <plug>(SubversiveSubstituteLine)
nmap S <plug>(SubversiveSubstituteToEndOfLine)

let mapleader = "\<Space>"
nnoremap <leader>- <C-^>
nnoremap <leader>k gt
nnoremap <leader>j gT
nnoremap <leader>d :bd<CR>
nnoremap <leader>D :bufdo bwipeout<CR>


" s -> substitute
nmap <leader>s <plug>(SubversiveSubstituteRange)
xmap <leader>s <plug>(SubversiveSubstituteRange)
nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
nmap <leader>S <plug>(SubversiveSubstituteRangeConfirm)
nmap <leader>SS <plug>(SubversiveSubstituteWordRangeConfirm)
nnoremap <leader>p :Reg<CR>

" f -> find (fzf)
nnoremap <leader>; :History:<CR>
nnoremap <leader>ff :Files .<CR>
nnoremap <leader>fF :Files ~<CR>
nnoremap <leader>fg :Rg<CR>
nnoremap <leader>fG :Rg!<CR>
nnoremap <leader>fm :Vista finder coc<CR>
nnoremap <silent> <Leader>fb :call fzf#run({
            \   'source':  reverse(<sid>buflist()),
            \   'sink':    function('<sid>bufopen'),
            \   'options': '+m',
            \   'down':    len(<sid>buflist()) + 2
            \ })<CR>

" g -> git (fugutive)
nnoremap <leader>gg :Git<Space>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <Leader>ga :GitGutterStageHunk<CR>
nnoremap <Leader>gu :GitGutterUndoHunk<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gcc :Gcommit -v -q<CR>
nnoremap <leader>gca :Gcommit -v -q --amend<CR>
nnoremap <leader>gco :GCheckout<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gD :Git diff<CR>
nnoremap <leader>gr :Grebase --interactive<Space>
nnoremap <leader>gR :Grebase<Space>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gO :Git branch<Space>
nnoremap <leader>gl :Commits<CR>
nnoremap <leader>gL :BCommits<CR>
nnoremap <leader>gpp :Git push<CR>
nnoremap <leader>gpP :Git pull<CR>
nnoremap <Leader>gj :GitGutterNextHunk<CR>
nnoremap <Leader>gk :GitGutterPrevHunk<CR>
nnoremap <Leader>gB :.Gbrowse<CR>
vnoremap <Leader>gB :Gbrowse<CR>

" l -> language (coc)
nnoremap <leader>lb :VimuxRunCommand('./gradlew build')<CR>
nmap <leader>ln <Plug>(coc-rename)
nmap <leader>ll <Plug>(coc-codeaction)
xmap <leader>ll     <Plug>(coc-codeaction-selected)
nmap <leader>lf <Plug>(coc-fix-current)
nmap <leader>lr <Plug>(coc-references)
nmap <leader>li <Plug>(coc-implementation)
nmap <leader>ls <Plug>(coc-code-lens-action)
nmap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gd :call CocAction('jumpDefinition', 'drop') <CR>
nnoremap K  :<C-u>call CocAction('doHover')<CR>

" Vista tagbar
nnoremap <leader>v  :Vista!! <CR>

" t -> Tests
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>ts :TestSuite<CR>
nnoremap <leader>tl :TestLast<CR>

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
